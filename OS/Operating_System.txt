- OS from Tanenbaum text book

- instruction : lệnh
- abundance: sự phong phú

Nguyên lý hệ điều hành
- Có 2 nguyên lý hoạt động trong máy tính
kernel mode: hệ điều hành (quyền truy cậ mọi tài nguyên hardware, I/O devices..)
user mode : chương trình phần mềm khác
1. Khái niệm hệ điều hành: 
- P34
Cung cấp người lập trình hệ thống một thệ thống tài nguyên
trừu tượng, thay vì một loạt các đối tượng phần cứng, đồng 
thời quản lý tài nguyên phần cứng đó.

1.1 
xếp theo mức độ trừu tượng:
ổ cứng --> disk driver --> file
File ở mức độ trừu tượng cao hơn, cung cấp khả năng giao tiếp
với ổ cứng cho ứng dụng và người lập trình, thay vì việc phải cần
hiểu rõ về hoạt động của ổ cứng

1.3.1 Processors 
- CPU lấy câu lệnh từ bộ nhớ, giải mã và thực thi (fetching - decoding - executing )
- Truy cập vào bộ nhớ là việc tốn kém so với việc thực thi câu lệnh

- Vì vậy cần thanh ghi (regsiter) để lưu dữ liệu
- Thanh ghi vs RAM: thanh ghi lưu data , RAM lưu cả câu lệnh và data

- Các thanh ghi: program counter, stack pointer, PSW (program status word)
Win 32 bit: thanh ghi 32 * 32 bit, win 64; thanh ghhi 64 * 64 bit

- PSW thường chứa dữ liệu kiểm soát giữa việc thực thi câu lệnh ở
kernel mode và user mode (dữ liệu if/else chuyển đổi việc thực thi câu lệnh
ở kernel hay user mod)
- System call : thủ tục đặc biệt chuyển từ mode user sang mode kernal (TRAP)
- Đa luồng: (multithreading) cung cấ khả năng chuyển ngữ cảnh từ thread khác
nhau với tốc độ cao vì CPU lưu giữ được trạng thái của nhiều luông cùng 
một lúc, tuy nhiên vẫn chỉ có 1 process đang hoạt động 
GPU: có hàng nghìn core, xử lý rất tốt các tác vụ song song, ko phù
hợp với các tác vụ lần lượt

1.3.2 Bộ nhớ
Thanh ghi -> Cache --> Main memory --> Disk
Flash disk có tốc độ ở giữa so với RAM và ROM, tuy nhiên nếu dữ liệu bị xóa nhiều 
lần bộ nhớ sẽ bị hao mòn
Thanh ghi : 32* 32 bit với win 32, 64 * 64 bit với win 64
Cache sử dụng cache line (cache hit vs cache miss)

1.3.3 Disks
Dùng bộ nhớ ảo: (virtual memory) : cho chương trình chạy trên Disk và
dùng RAM như bộ nhớ cache (thay vì chương trình chỉ chạy trên ram)
--> không gian bộ nhớ lớn hơn, tuy nhiên yêu cầu cần phải mapping địa 
chỉ đã được located trong RAM. Công việc mapping này được xử lý bởi MMU 
(Memory Management Unit)

1.3.4 I/O Devices
- Gồm 2 phần: controller và device
- Controller là những con chip, nhận yêu cầu từ OS và điều khiển devices
- Controller cung cấp 1 tầng trừu tượng hóa để giao tiếp với device hiệu quả hơn
1. Tiêu chuẩn của disk: SATA tiêu chuẩn disk của IBM (serial advanced technology attachment)
2. Device -> Controller -> Driver (dùng để giao tiếp với controller của device) 
3. Driver thường sẽ được đặt vào OS và chạy ở kernel mode
4. Các cách đặt driver vào kernel
    4.1 Relink kernel với driver mới, sau đó reboot system (dùng trong Unix)
    4.2 Tại đường dẫn + reboot system, tại thời điểm reboot, hệ điều hành sẽ load driver cần thiết (dùng trong window)
    4.3 Cài đặt driver dynamically, không cần reboot (ví dụ USB, IEEE device khi được sử dụng sẽ cần load drivers phù hợp
        mà không cần reboot lại hệ thống)
5. Mỗi controller có những thanh ghi để OS giao tiếp với nó. Ví dụ disk có các thanh ghi để lưu trữ: địa chỉ disk, 
địa chỉ bộ nhớ, số lượng sector
Trong nhiều hệ thống, thanh ghi thiết bị (device registers) được ánh xạ đến không gian để chỉ của OS nên
nó được đọc và ghi như 1  địa chỉ thông thường. Ở những thiết hệ thống khác,
 thanh ghi thiết bị được đặt vào I/O port space và có địa chỉ cổng riêng.
5. Có 3 cách gọi Input vs Output 
        5.1 User gọi lời gọi hệ thống, lời gọi được chuyển thành lời gọi thủ tục (procedure call) đến driver phù hợp.
            Driver sẽ start I/O và giám sát thiết bị đã hoạt động hoàn thành hay chưa (busy waiting: vì CPU sẽ phải đợi đến thi 
            thiết bị hoàn thành)
        5.2 Tạo ra 1 interupt để báo hiệu công việc I/O đã hoàn thành. Trong OS có interrupt controller để kiểm soát yêu cầu ngắt 
            từ nhiều thiết bị khác nhau. Mỗi thiết bị có interrupt handler để thông báo interrupt của device đó, tùy theo mức độ
            ưu tiên của device mà interrupt tương ứng sẽ được xử lý.
            Đoạn cuối về interrupt chưa hiểu lắm
        5.3 Sử dụng phần cứng đặc biệt: DMA (Direact Memory Access)

1.3.5 Buses
- Xem thêm phần ghi chú trên công ty ...
SCSI (Small Computer System Interface): bus hiệu năng cao, dùng cho disk tốc độ cao
máy quét...
- plug and play (cắm là chạy): tự động cung cấp interupts level, địa chỉ I/O, 
- Có nhiều bus trong hệ thống: cache, memory, PCIe..., bus chính trong máy tính là PCIe
PCIe sử dụng serial bus architecture (thay vì parallel bus architexture) -> dữ liệu gửi hết 
trên một đường (called lane)
(Xem hình 1-12: page 63)
- CPU giao tiếp với memory bằng DDR3 bus
- CPU giao tiếp với thiết vị bên ngoài bằng PCIe (Peripheral Component Interconnect Express) bus
- Giao tiếp với các thiết bị khác qua Hub thông qua bus DMI (Direct Media Interface)
- Hub kết nối tất cả các thiết bị dùng USB

1.3.6 Booting PC 
- Trong PC có parentboard, trên đó chứa BIOS (basic inout ouput system)
BIOS chứa low-level I/O software, thủ tục đọc bàn phìm, ghi màn hình ...
BIOS chứa ở flash RAM nên ko bị mất khi máy tính tắt.
Khi PC được booted, BIOS sẽ check bao nhiêu RAM đc cài đặt, các thiết bị khác được
phản hồi đúng chưa. bằng cách scan PCIe. Sau khi scna, BIOS kiểm tra các device
đã có đầy đủ drive chưa, nếu chưa có sẽ yêu cầu cài đặt 

1.4 Các hệ điều hành
1.1.4 Mainframe 
Máy tính cỡ lớn
3 chức năng chính: xử lý hàng loạt, xử lý giao dịch, time sharing
Đang được thay thế bởi các hệ điều hành dạng UNIX như LINUX



1.5 
1.5.1 Processes (Tiến trình)
- Là chương trình đang được thực thi
- Gắn với mỗi tiến trình là 
    + Không gian địa chỉ
    + Tài nguyên khác (file, đồng hồ, thanh ghi, tiến trình khác)
-> giống như 1 container chứa tất cả thông tin cần thiết để chạy chương trình

- Trường hợp process bị tạm dừng (suspend), thông tin về process sẽ được lưu lại trong process table
- Mỗi process được khởi chạy sẽ có UID của user kích hoạt, giá trị UID được gán bởi system administrator.
UID trong UNIX được gọi là supperuser, windows là Administrator






