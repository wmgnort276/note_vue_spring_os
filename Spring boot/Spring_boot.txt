pass mysql :
Nam276201@


Shift + enter : create new line at middle of current line
alt + insert : insert getter, setter, toString method
sout: short cut for System.out.println()
@JsonIgnore: đánh dấu trường là ko cần thiết (ví dụ khi map object)

============= 
Đối tượng Authentication đại diện cho token của user đã được xác thực
đối tượng này được chứa trong SecurityContextHolder 
- các phương thức: getDetails, getPrinciple(), isAuthenticated()
getPrincipal(): trả về đối tượng UserDetails
===================
AuthenticationManager có DaoAuthenticationProvider nhằm xác thực username, 
password, nếu username password thỏa mãn sẽ trả lại một đối tượng Authentication

================
Method parse() trong java
- Dùng để extract thông tin cần thiết, thường là extract từ string để lấy thông 
tin (VD thông tin Date lưu dưới dạng String)

=========================== 
// Upcasting is rarely used 
upcasting : Parent p =(Parent) new Child();

downcasting: Parent p = new Child();
	     Child c = (Child) p;

==================== @Lob ====================
Lob Data in Hibernate
Gồm 2 loại
CLOB: character large object chứa dữ liệu text lớn
BLOB: Binary Large object chứa dữ liệu nhị phân như ảnh video,audio


============= Persist trong hibernate java========
- Chuyển đổi trạng thái entity sang câu lệnh sql
- Persist chuyển entity từ trạng thái transitent sang trạng thái 
persistance (trạng thái bền vững)
- Gọi đến persist method sẽ thực thi câu lệnh insert (làm cập nhật id entity)
 thay vì phải đợi đến flush time để làm điều này

========= Flush time ========
- thời diểm JPA-Hibernate đồng bộ hóa các thay đổi của entity xuống DB
- Trong JPA, đây là thời điểm mà các câu truy vấn kết nối đến DB

============== Vòng đời entity trong Hibernate và JPA============
https://techmaster.vn/posts/36269/trang-thai-cua-entity-thuc-the-trong-hibernate-va-jpa

Persistence context quản lí entity
1. Trạng thái new (Transient): entity mới đc khởi tạo
2. Persistent (Bến bỉ): khi data được ánh xạ vào DB và quản lý bởi Persistence Context
Thay đổi được ghi nhận vào db trong lện session Flush.
Nếu đối tượng ở trạng thái này, ko cần gọi save hay update khi commit transaction
flush sẽ cập nhật xuông DB
3. Detached (ta)


============ JPA===============
Java persistence: cách quản lý dữ liệu trong ứng dụng, ánh xạ table trong DB
sang mối quan hệ của object
- Sử dụng EntityManager (interface) để tương tác với các entity
- JPA sử dụng JPQL (java persist query language): truy vấn thông qua các đối tượng của java thay vì truy vấn trực tiếp đến DB

============ Hiberbnate=========
- Giúp thao tác với DB thông qua các đối tượng, impliment JPA
- Sử dụng session để tương tác entity

============= So sánh JPA và JDBC ============
- JDBC (DB connectivity): dùng để tương tác với DB (config trong file application)
- JDBC: hỗ trợ viết sql command để tương tác, đọc dữ liệu từ BD, cần viết cả
câu query thay vì dùng anotaion như trong JPA
- JDBC: cần viết code trong try catch block vì JDBC throw exceptions

- JPA: hỗ trợ cấu trúc hóa đối tượng thành bảng trong DB, gần với ngôn ngữ
hướng đối tượng, hạn chế việc phải check lại liên tục sự thay đổi giữa object trên BE
và DB


=========== annotation in JPA: oneToMany, OneToOne, ManyToOne, ManyToMany======
Link
https://dev.to/jhonifaber/hibernate-onetoone-onetomany-manytoone-and-manytomany-8ba

- @OneToOne: @JoinCollumn sẽ quyết định việc entity hiện tại chứa Foreing key của 
entity khác


============= Lấy thông tin ID user ============
Authentication authentication = SecurityContextHolder.getContext().getAuthentication();


================ Spring validation ============
- Dùng để validate input của người dùng


=========== @Notblank, @NotNull, @NotEmpty =============
- Các annotation này không ảnh hưởng đến constrant DB
- Nếu muốn update trong DB, thêm nullable = false vào @Collumn(nullable = false)
hoặc @JoinCollumn()
- @NotNull: field ko thể null, có thể empty ("")
- @NotEmpty: field không thể null, và ko thể empty, thêm @Size(min = 2, max = 10)
- @NotBlank =  @NotEmpty và dữ liệu được trim


==============================================================
============= 1. Facade Java: (1 kiểu design pattern) ================
- Trong một hệ thống có nhiều hệ thống con, mỗi hệ thống con đảm nhận
một công việc khác nhau, khi đó Facade giống như 1 lớp bên ngoài giao 
tiếp với client, có chức năng cung cấp dịch vụ mà hệ thống con đó cung cấp.
VD: Hệ thống cửa hàng phụ vụ nhiều yêu cầu: đặt hàng, thanh toán, dịch vu
riêng -> Facade là nhân viên tổng đài phục cụ, làm nhiệm vụ giao tiếp với
khách hàng, cung cấp và phục vụ cho lựa chọn của họ.

======================================================
============ 2. Các kiểu design patterns ==============
https://tuan200tokyo.blogspot.com/2022/10/blog10-gioi-thieu-ve-javascript-design.html
https://www.digitalocean.com/community/tutorials/java-design-patterns-example-tutorial
Các kiểu design pattern trong java:
https://stackjava.com/category/design-pattern

- Singleton Patterns: một lớp chỉ có 1 instance duy nhất, bất biến
- Adapter: tạo một lớp trung gian để giao tiếp với interface hoặc class khác
- Factory Method Pattern: các đối tượng có thể sửa đổi
https://viblo.asia/p/factory-method-pattern-trong-java-4dbZNoNQlYM
	+ Tạo 1 interface, abstract class sau đó tạo 1 class để implment
	sau đó trạo Factory class bên trong đó có phương thức 
	khởi tạo Object chúng ta cần -> xFactory.getX(), object được lấy 
       	phụ thuộc vào đầu vào (type)
VD: factory 
public interface Phone{
	trong đây có list các thuộc tính
}
public class Iphone implement Phone { }
public class SamsungPhone implement Phone { }
public class PhoneFactory {
	public Phone getPhone(Phone_Type)
}

- Abstract Factory Pattern:  chứa nhiều factory class bên trong
- Provider:  tạo 1 interface và nhiều provider implement interface đó, 
mỗi class riêng sẽ thực hiện chức năng riêng

- Builder pattern: xử lý tồn đọng với Factory và abstract factory nếu Object có
nhiều thuộc tính, builder pattern sẽ cung cấp cách xây dựng đối tượng từng
bước một và cung cấp phương thức trả về đối tượng đó. Thường chứa method 
build tạo ra đối tượng với nhiều thuộc tính

- Composite pattern (structural pattern)
(Tương tác với các đối tượng tương tự nhau giống  như các đối 
tượng đơn trong cùng 1 list)


- dependency injection : là 1 phương pháp thực thi. Factory patterns là 1 phương pháp thực thi DI

=============================================
================== 3. JWT ==================
- Server ký bằng khóa riêng của server, gửi jwt lại cho user đính kèm 1 request
-> mục đích là để xác thực user, ko có khả năng bảo mật thông tin người dùng

===========================================================
======================  4. IOC  ==============================
            loadingData.loadingOfficeRoot



===========================================================
====================== Java OOP==================
- Upcasting
Parent p = (Parent) new Child();
-> rarely used

- Không thể downcast trực tiếp
Child child = new Parrent();  // -> compile error

- Downcast :
Parent a = new Child();
Child b = (Child) a;


==================== Custome mapping using Mapperfacade Orika =======================


Học từ document spring 2.3.4 
https://docs.spring.io/spring-boot/docs/2.3.4.RELEASE/reference/htmlsingle/#using-boot
==== starter dependency ======
- Chứa 1 set các dependency trong application
VD  spring-boot-starter-data-jpa: dùng Spring và JPA access vào database

===== Tên packages ============
- packages name, tên packages: dùng để xác định file jar cần chạy nếu sử dụng
các anotaion.  Nếu không, spring boot không thể xác định được file jar cần chạy

@SpringBootApplication = @EnableAutoConfiguration + @ComponentScan + @Configuration
@Configuration giúp class có thể đăng ký thêm các beans 
Nếu sử dụng @ComponentScan, tất cả các component với annotation @Component, @Service , @Repository ...
@Repository khi được đặt trước interface trong spring boot, JPA sẽ tự động tạo ra 1 impliments class của interface đó
nên ta có thể inject trực tiếp đối tượng của class đó và sử dụng trong 1 class khác 
sẽ tự động được đăng ký

- Dùng @Import để import các configuration classes
- Hoặc có thể dùng @ComponentScan để tự động pick up tất cả các component
- @SpringBootApplication(exclude={DataSourceAutoConfiguration.class}) : dùng để disable auto-configuration 

2. Các tính năng spring boot
- Lazy initialization: bean chỉ được khởi tạo nếu có http request thay vì được khởi tạo lúc ứng
dụng khởi chạy


==== Toán tử :: trong stream list ==========
Toán tử :: : method reference operator
Tương đương lambda expression


=========== Java basic ============
I. Java String
https://www.javatpoint.com/java-string
- String, StringBuffer, StringBuilder: đều tạo string
1. String
	1.1 String: (immutable - bất biến) tạo đối tượng không thay đổi, khi sử dụng các phương thức làm thay đổi đối tượng, 1 instance mới
	sẽ được tạo ra. Trừ trường hợp khởi tạo new String("string"), khi đó JVM sẽ khởi tạo đối tượng riêng cho String này
	1.2 String là object, nếu tạo mới 1 String đã tồn tại trc đó, JVM sẽ chỉ khởi tạo reference đến String đó. String được chứa trong vùng 
	nhớ đặc biệt (string constant pool)
	1.3 VD
		String s1 = "hello";
		String s2 = new String("Hello"); => object được tạo ngoài pool -> s1 != s3
    1.4 Khi String dùng method concat, thực thế là đang sử dụng StringBuilder().append() để nối xâu
	1.5 String.format("%s%s", s1, s2);
	1.6 Khi so sánh string, giá trị của chuỗi được so sánh



 ================ 2. StringBuffer ====================
- Tạo ra String có thể thay đổi (mutable)
- Khi so sánh, reference được so sánh với nhau
- Không overide equals() method của String
- Dùng Heap memory lưu string
3. StringBuilder 
- Tạo ra String có thể thay đổi (mutable) (khác với StringBuffer vì StringBuilder là non-synchronize)


 ================ 4. So sánh String  =================
	4.1 equals: so sánh content của string
	4.2 == operator: so sánh sử dụng tham chiếu của String
	4.3 compare to trả về 1 giá trị: == trả về 0, lớn hớn trả về 1, nhỏ hơn trả về -1
5. Inner class
https://www.javatpoint.com/member-inner-class
5.1 Inner class là con của nested class. Nếu class bên trong là non-static nó sẽ được coi là inner-class
5.2 


 ====================== 6. Exception Handling ===============
- Là object throw lúc runtime, handling exceptions giúp các đoạn code phía sau khi xảy ra exceptions vẫ hoạt động
- Check exceptions: được checked ở compile-time. VD: IOException, SQLExceptions
- Unchecked  exceptions: các exceptions ở RuntimeException

Throwable 
		Error
				StackOverflowError
				VirtualMachineError
				OutOfMemoryError
		Exception
				IOException
				SQLExceptions
				CLassNotFoundException
				RuntimeException
						ArithmeticException
						NullPointerException
						NumberFormatException
						IndexOutOfBoundException
								ArrayIndexOutOfBoundsException
								StringIndexOutOfBoundsException

- Với Unchecked Exception: dùng trong function, block of code  (có thể propagate)
- Với Checked Exception: cần throws trong định nghĩa method (method signature), chỉ có thể được propagate khi dùng với throws 
trong method signature
VD: public void method() throws Exception {

}
Khi method định nghĩa bằng từ khóa throws, khi gọi method cần catch exception đã định nghĩa hoặc thêm signature của exception
ở method bên ngoài gọi đến method đó
- Có thể custome Exception, super message của class exceptions cha

- throw vs throws: 
https://www.javatpoint.com/difference-between-throw-and-throws-in-java
throw: tại 1 thời điểm chỉ được throw 1 exception
throws: có thể throws nhiều exception tại 1 thời điểm, có thể dùng với cả checked và Unchecked exception


- method overiding sử dụng exception handling
	- Nếu method ở class cha ko định nghĩa exception, method overide ở class con cũng ko thể định nghĩa checked exception
	- Nếu method ở class cha ko định nghĩa exception, method overide ở class có thể định nghĩa unchecked exception
	- Nếu method ở class cha có định nghĩa exception, method overide có thể khai báo exception nhỏ hơn hoặc bằng exception đó, hoặc ko nhưng ko thể khai
	báo exception cha (parent cuae exception định nghĩa ở method của class cha)



======================================= 7. Java I/O ===============================
- Dùng package java.io
- stream là 1 chuỗi dữ liệu (sequence of data)
- System.out: ouput stream tiêu chuẩn
- OuputStream: dùng đẻ ghi dữ liệu đến đích (file, thiết bị ngoại vi, socket ...)
	- Các method trong OuputStream: write (ghi byte / array of bytes), flush (flust ouput stream), close ...
	- FileOutputStream: ghi file, sử dụng bytes. Ghi string cần chuyển sang bytes : s.getBytes() (return byte[])
	- BufferedOutputStream : ghi data ra buffer thay vì ghi trực tiếp ra stream. Thông thường stream đọc / ghi từng byte, tuy nhiên 
	với buffer, dữ liệu được đọc / ghi trước vào buffer và available cho những lần gọi tiếp theo. Trong buffer có phương thức mark() để dánh dấu
	vị trí con trỏ trong buffer, và phương thức reset() để quay trở về vị trí đã được đánh dấu
	- ByteArrayOutputStream : dùng để ghi dữ liệu ra một byte array tạm thời và để sử dụng sau đó (có thể ghi ra nhiều file dữ liệu khác nhau)
	- flush() giúp ghi ngay lập tức dữ liệu trong buffer, điều này làm giảm tốc độ ghi dữ liệu tuy nhiên nó lại đảm bảo được
	việc ghi dữ liệu diễn ra ngay lập tức thay vì phải đợi đến khi buffer đầy hoặc phương thức close() được gọi.

- InputStream: đọc data từ file... 
	- Các method: read (đọc từng byte, trả về -1 nếu đọc đến cuối file), available (trả về số lượng byte có
	 để đọc từ input stream hiện tại)
	- SequenceInputStream : đọc input từ nhiều stream khác nhau theo thứ tự




==================================== 8. Static  ==========================================
Là thành phần riêng của class (được khởi tạo một lần tại 1 nơi trong bộ nhớ khi class được load)
state được khởi tạo ở thời điểm runtime thay vì compile




 ==================== 9. Java serialization ======================
- Thực hiện ở runtime
- Viết state của object thành dòng byte (dùng nhiều trong JPA, Hiberbnate)
- Ngược lại quá trình này là deserialization
- Với serialization: dùng với object bằng cách gọi phương thức writeObject() của ObjectOuputStream
- Với deserialization: dùng readObject() của ObjectInputStream
- Object trong java thuần nếu ko sử dụng JPA cần inpliments serialization interface để marked là có thể chuyển 
đổi về dạng byte stream. 
- Trong kế thừa, nếu class cha implement serialization thì class con cũng sẽ có khả năng tương tự
- Trong Aggregation (1 class có thuộc tính là 1 class khác): nếu class con bên trong không được implement serialization
thì class ngoài gọi đến nó cũng không thể serialization
- Nếu có thuộc tính static, thuộc tính sẽ không được serialization vì thuộc tính static thuộc về class thay vì thuộc về object. Nhưng nếu là final stream thì sẽ 
được coi là hằng số và được ghi ra stream
- serialVersionUID: định danh lớp được serialization, vì khi đối tượn được serialiable sẽ có nhiều phiên bản serialVersionUID khác nhau, 
vì vậy các thiết bị khác nhau sẽ sử dụng cách định danh serialVersionUID khác nhau, vậy nên cần khai báo trường serialVersionUID củ thể 
trong class để đảm bảo sự định danh đồng nhất giữa các thiết bị khác nhau
- transient keyword: đánh dấu 1 trường sẽ ko được serialiable




================================== 10. Java Reflection =================================

- Thay đổi hành vi của class ở run time
- java.lang.Class: cung cấp khả năng thay đổi hành vi của class trong thời gian runtime
- các phương thức lấy tên class, kiểm tra class có là interface hay không ....
- phương thức getClass() lấy class của đói tượng




==========================  11. AnonymousClass ========================================
- Class được khai báo và khởi tạo cùng 1 lúc. Không có tên class




==========================  12. lambda expression  ====================================
- functional interface: interface chỉ có 1 abstract method
được đánh dấu : @functionalInterface
- functial intenrface có thể có thêm các method của object class như toString, hashCode
- functional interface ko thể kế thừa 1 functial interface có 1 abstract method, nhưng có thể kế thừa 1 interface ko là functial interface
- Các predefined functional interface: https://www.javatpoint.com/java-8-functional-interfaces (vd Function<>, BiFunction<>-)


- lambda expression: cung cấp inplimentation của functional interface
Cấu trúc
Ví dự, ta có interface Hello, trong đó chỉ có 1 method (functional interfacec)
interface Hello {
    public String say(String word);
}

main() {
	// định nghĩa method của interface. Nếu ko sử dụng lambda expression, sẽ phải sử dụng AnonymousClass
	// Biểu thức lambda: s -> s + "Xin chao" giống như việc khai báo 1 object
	Hello hello = s -> s + "Xin chao"; 
	System.out.println(hello.say("Nam "));
}

- Ví dụ trong trường hợp dùng forEach trong java, method này chấp nhận 1 object Comsumer, Consumer là 1 functial interface, nên biểu
thức lambda có thể được sử dụng trong trường hợp này.




============================= 13. Method reference (dùng dấu ::) =============================

https://www.javatpoint.com/java-8-method-reference

- Dùng để tham chiểu đến method 
13.1 Dùng để tham chiếu đến tatic method của class (class có thể có nhiều static method)
13.2 Tham chiếu đến instance method: tọa ra intance bằng từ khóa new, và dùng :: tham chiếu đến method của class đó
13.3 Tham chiếu đến constructor: 
interface Messageable{  
    Message getMessage(String msg);  
}  
class Message{  
    Message(String msg){  
        System.out.print(msg);  
    }  
}  
public class ConstructorReference {  
    public static void main(String[] args) {  
        Messageable hello = Message::new;  
        hello.getMessage("Hello");  
    }  
}



============================= 14. Các method trong 1 interface =========================================
========================================================================================================

- abstract method: method không có triển khai của interface, các class inplementation sẽ phải triển khai các method này
- Default method : Method được triển khai nay bên trong interface. Thông thường interface chỉ được định nghĩa method mà không được triển khai nó
- static method: method thuộc về interface, được gọi bằng tên interface
- private interface: được gọi bởi static interface và default interface 



========================= 15. Java Stream ===============================================
https://www.javatpoint.com/java-8-stream
- chuyển đói tượng trong các kiểu dữ liệu list, array, thiết bị vào ra qua "pipeline of computational operations"
- để sắp xếp stream theo thứ tự giảm dần , có 3 cách
		C1: Stream.of(...).sorted(Comparator.reverseOrder()).collect()             ==> using method of Comparator
		C2: Stream.of(...).sorted((a, b) -> return (a > b) ? 1 : -1).collect()     ==> lambda function
		C3: Stream.of(...).sorted((a, b) -> return b.compareTo(a)).collect()       ==> 

- filter lặp để lọc lây phấn tử thỏa mãn
- peek: trả về stream hiện tại thêm với action với từng phần tử (đối số nhận vào là Comsumer<T>)
- map: lặp qua phần tử và có thể thay đổi phần tử đó (đối số nhận vào là Function<T,V>)
- Collectors.toSet(): chuyển list về set, set không chứa các phần tử không trùng nhau


=====================   @Contract(pure=true) ===========
- annotation xác định đoạn mã nào đó là pure (cùng 1 đầu vào luôn trả ra cùng 1 kết quả, không phụ thuộc vào thời điểm gọi)


============================= Comparator ======================================
- Comparator.reverseOrder(): phương thức sử dụng trong hàm sorted của stream


====================== Predicate<T> =================
- Nhận vào 1 đối tượng trả về tính true false của đối tượng đó
- là functional interface, có abstract method: test() dùng để kiểm tra tính đúng đắn của đối tượng đó
VD Predicate<Interger> predicate = n -> n%2 == 0; 
predicate.test(5) ===> false
predicate.test(6) ===> true

================= Collectors ==============
- extends Object class
- cung cấp các phương thức tính tổng, tính giá trị trung bình, số lượng phần tử ...


============== StringJoiner =============
- Tạo string với các ký tự ngăn cách, và các ký tự đầu cuối chuỗi (prefix, suffix)


============= Optional class =================
- Có method để check sự tồn tại của 1 object (presence)
- các phương thức: isPresent, ifPresent ....


====== java nashorn =========
- chạy code js trong source code java, sử dụng jjs command-line, hoặc dùng code
VD: sử dụng code chạy file js
    ScriptEngine ee = new ScriptEngineManager().getEngineByName("Nashorn");
	ee.eval(new FileReader("hello.js"));

======= Parallel sort =========
- dùng riêng cho class Array
- Tận dụng CPU nhiều nhân để sắp xếp dữ liệu đồng thời


========== java type reference =====
- tự động gọi đến method với tham số có kiểu tương ứng phù hợp
- 




=========== @Accessors =============
-  tùy biến sửu dụng getter và setter trong lombok
1. fluent = true -> loại bỏ tiền tố get và set trong getter và setter (vd: user.userName("NamVN") -- getter).
2. chain = true -> setter method trả về this thay vì void, sử dụng giống builder pattern.
3. frefix = {"s", "b"} : loại bỏ 1 số prefix gây khó hiểu trong thuộc tính.


============= Logging ==============
- Logging dùng để truy vết các thao tác sử dụng trên ứng dụng

- File .groovy, .xml sẽ tự động được Spring Boot load vào file cấu hình mặc định
- Sử dụng Slf4j với anotaiton sẽ sử dụng log mặc định


======== getById vs findById ==========
- getById: trả về tham chiếu (reference) đến entity đó (sử dụng khi việc truy cập vào các thuộc tính của đối tượng là không cần thiết)
getById(): là lazy operation, không hề động đến DB
getById(): gọi đến phương thức EntityManager.getReference()
Sử dụng trong trường hợp muốn gán entity hiện tại cho 1 entity khác
- findById: trả về 1 entity

- Optional<>: object trả về sẽ không thể dùng với mappping, setting method , serialization
- để trả về Object thường, dùng phương thức .get()


=========== Paging ===========
- JPARepository đã extend PagingAndSortingRepository
- PageRequest : class impliments Pagable interface
PageRequest.of(x, y): page thứ x + 1 và có y phần tử
- Khi sử dụng với phương thức findAll, trả về đối tượng Page<> hoặc List<>
Nếu đối tượng trả về là Page<>, bên cạnh trả về 1 list entity sẽ trả về thêm thông tin tổng số page hiện có bằng
cách thực hiện thêm câu lệnh count query. Điều này làm giảm hiệu năng của việc query.
- Để trả về 1 list bình thường, dùng phương thức getContent() của Page<>