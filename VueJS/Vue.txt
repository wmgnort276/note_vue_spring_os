application instance: app = createApp()

- app config: sử dụng app (application instamce) => config errorHandler,
component (component có thế được sử dụng ở mọi nơi trong app)


=========== Mounted(), created() in Vue ========
mouted(): khi component được thêm vào DOM
created(): trước khi component được thêm vào DOM (Khi được khởi tạo)
- nên dùng mounted() khi fetch data: fetch data sẽ luôn là asynchronous
nhưng, nhưng Vue không đợi created() thực hiện xong => lỗi đồng bộ

=========== Các đối tượng được sử dụng trong template expression ==============
https://github.com/vuejs/core/blob/main/packages/shared/src/globalsWhitelist.ts#L3
Biếu thức JS chỉ được sử dụng những nội dung trong list này

================ directive ============
Xem them mot so directive 
https://vuejs.org/api/built-in-directives.html#v-html
- v-html: là 1 directive trong vue (đối tượng đặc biệt trong vue), khi sử dụng
	nội dung của đối tượng sẽ là biến được tham chiếu bởi v-html
- v-html : chỉ nên dùng với 1 đối tượng tin cậy trong vue, không nên dùng với
	content được cung cấp bởi người dùng (nguy cơ tấn công XSS)

v-bind:id="dynamicId" => làm đối tượng id đồng bộ với biến dynamicId, 
nếu dynamicId là null / undefined thuộc tính id sẽ bị loại bỏ khỏi element
:id (dạng viết tắt), 
có thể v-bind một object
VD: objectAttr = {
  class: 'name',
  someAttr: 'ahh'
}

<div v-bind="objectAttr"></div>

:disabled="diableVariable" (hay dùng với button, input ...)

:disabled="(1==1) ? true : false" : biểu thức JS có thể được thực thi trong 
giá trị của Vue directives

v-if: sẽ trực tiếp làm remove/insert element

v-on:click="handleClick" : gắn sự kiện click 
@click

Dùng dynamic argument để tạo sự kiện dom hoặc attributes có thế nhận 
được nhiều giá trị, giá trị dynamic argument sẽ được convert về lower case
@[dynamicEventName]="doSomthing"

@submit.prevent: .prevent là modifiers, gán thêm cho sự kiện v-on:submit 
sử dụng event.preventDefault()

=========== Reavtivity ==============
=====================================

- data option: là 1 function return list các state
data() {
   return {
	  instamce1: 'helo',     ===> state
   }
}
- Các instance (tham chiếu bởi this trong vue ) của 1 component sẽ 
được thêm vào khi cá instance lần đầu tiên  được khởi tạo (created())
- Với các state trong top-level data(), không nên dùng biến bắt đầu với 
$ và _ vì đây là tên các biến sử dụng nội bộ của vue hoặc các built-in API
vd $ref ....


- Method không nên sử dụng arrow function, vì nó ngăn chặn Vue binding this
- khi thay đổi state có thể DOM chưa update ngay, 
có thể sử dụng nextTick để đảm bảo DOM đã được update khi state thay đổi


===========  Proxy trong JS ===========
- Custom khả năng truy cập vào đối tượng, custome các internal method 
của đối tượng đó (ví dụ: delete, setProtofypeOf ...)
- Nếu gán 1 instance là 1 object theo kiểu
const newObject = {
      name: 'newName',
      age: 2
    }
this.testObject = newObject;
this.isEqual = (newObject === this.testObject)  ---> false
vì instance testObject khi được gán bằng object mới sẽ trở thành proxy của 
đối tượng đó


==================== conputed in vue ==================
======================================================

computed là 1 thuộc tính của component giống như methods, thuộc tính này
là 1 object và chứa bên trong các phương thức
computed: {
	method() {
		return <expression tính toán những giá trị phức tạp và được sử dụng 
			nhiều lần >
	}
}
- những giá trị phức tạp có thể được tính toán trong method và được gọi trong 
template 
{{ calComplexValue() }}
tuy nhiên ta nên ưu tiên dùng computed vì khả năng cache lại dữ liệu dựa trến state 
ngược lại method sẽ luôn chạy cho dù giá trị state không hề thay đổi


======= class , style của html tag ==========================
=============================================================
https://vuejs.org/guide/essentials/class-and-style.html
- bind sử dụng object 
<div :class="{ active: isActive }"></div> 
thẻ div bên trên sẽ có class name là active nếu biến isactive trả về giá trị true
active ở đây là giá trị dạng string
- bind sử dụng array 
return {
    activeClass: 'active',
    errorClass: 'text-danger'
  }
<div :class="[activeClass, errorClass]"></div>
activeClass: là state của component

- nếu component ( MyComponent )  có 1 root element, vd
<p class="foo bar">Hi!</p>
<MyComponent class="baz boo" />
==> class được render có class="foo bar baz boo"
- nếu có nhiều root elements trong component, cần chỉ định element được 
kế thừa class bằng thuộc tính $attr
<p :class="$attrs.class">Hi!</p>

============= conditonal redering ===========================
============================================================
v-if: có thể dùng trong template element
v-show: chỉ thực thiện những thay đổi css, và ko thể dùng trong template element

v-if có độ ưu tiên xử lý trước so với v-for khi đặt trong cùng 1 element



================= List  rendering ================
v-for= "(item, key, index) in object"
item : giá trị của trường
key : tên trường
index : vị trí (thứ tự) của trường trong object

- Render ra 1 list cần có :key, key có thể chấp nhận string, numbers
- Truyền list render từ component và sử dụng như data 
<Component
  v-for="(item, index) in items"
  :item="item"
  :index="index"
  :key="item.id"
/>


========== interpolation trong JS =============
`normal string ${varibale to be computed} other normal string`
- interpolation hỗ trợ việc viết string có xuống dòng


======== Form input binding ============
- Với thẻ input type="checkbox", vue hỗ trợ 2 giá trị bắt sự thay đổi 
của input 
:true-value="dynamicTrueValue"
:false-value="dynamicFalseValue"
giá trị biến đang được binding bởi thẻ input sẽ có giá trị tương úng
với 2 biến dynamic đó

=============== Watchers =============
immediate : watcher callback được gọi 

Callback Flush Timing : watcher sẽ truy cập vào DOM sau khi DOM được update




============ Refs ==============
-Dùng để tham chiêu trực tiếp đến element trong DOM
- this.$refs.input.focus() : tự động focus đối tượng có ref="input"
- Chỉ có thể tham chiếu đến đối tượng qua thuộc tính ref sau khi đối tượng đã
được mounted
- Có thể dùng ref trong v-for và khi tham chiếu đến sẽ được 1 mảng chứa tất 
cả các elements trong v-for, tuy nhiên thứ tự elemnet trong mảng này 
sẽ không đảm bảo như trong mảng gốc

- Dùng ref cho component child trong component cha
<Child ref="child" />
this.$refs.child tương tự với tham chiếu this trong component con
vì vậy component cha sẽ có thể truy cập toàn bộ vào component con
- Thuộc tính expose sẽ dùng để giới hạn các method được truy cập vào 
component con


====== Components ========
- props được pass xuống components sẽ trở thành 1 thuộc tính của component instance
- <slot/> dùng để pass text content vào component con

- Dynamic Component: chuyển đổi giữa các component dựa trên thuộc tính :is
vd: :is="curentTab", khi được switch theo cách này, component sẽ được unmounted

- conponent đặt bên trong các thẻ <li>, <ul> <table> sẽ đẩy ra error
-> giải pháp: dùng :is attribute và tiền tố vue:
<table>
  <tr is="vue:blog-post-row"></tr>
</table>

==== Lifecycle ==============


=============== Props ==========
convention
ở component cha gọi đến:           prop-name="name1"
props khai báo ở component con:    propName: String

- chú ý với props
+ với giá trị string static, dùng cách truyền props thông thường
<MyComponent greeting-message="hello" />
+ Với giá trị là biến hoặc giá trị js như true, false => dùng v-bind 
<MyComponent :greeting-message="true" /> = <MyComponent v-bind:greeting-message="true" />

- Việc thay đổi props từ component con sẽ bị warning
- Nếu cần thay đổi giá trị props trong component con (ví dụ )
chuyển text về dạng lower case -> nên dùng trong computed 

- Việc thay đổi props nếu đó là nested trong object và array là được phép, tuy 
nhiên cần tránh sử dụng mà cần emit đến component cha để thực hiện
thay đổi object đó.

- Validate props diễn ra trước khi instance được tạo ra vì vậy
dữ liệu trong data và computed sẽ chưa available trong validator


========= emit event ===============
- đối số trong hàm emit sẽ được chọn làm tham số đầu tiên trong
method được emit

========= Component v-model ============
- Mặc định v-model trong component sẽ có giá trị component con là modelValue, thay đổi 
emits: ['update:modelValue]
- Nếu muốn custome giá trị props này: v-model:custome-props="value"
- v-model .trim, .lazy, .number là các modifiers mặc định trong Vue, ngoài ra còn 
có thể sử dụng custom modifiers
VD: v-model.capitalize (để custom input thành chữ hoa), v-model:title.capitalize
Trong component con, sẽ sử dụng thuộc tính 
modelModifiers: {

}


===== Fallthrough attribute =====
- Với các thuộc tính như class, style, id, khi được khỏi tạo cho component ở component cha
các thuộc tính này tự động được thêm vào component con mà không cần phải khai báo trong props
- Với các event, nếu được khai báo ở component cha và cả ở component con, khi được kích hoạt
cả 2 sự kiện đều được gọi


============== Slots ===============
- dùng để truyền template content xuống component con
- slot outlet: nới chứa template truyền từ component cha
- fallback: dự phòng (dùng nếu component cha không truyền content cho xuống component con)
- slot nếu không khai báo thuộc tính name sẽ có giá trị name mặc định là default, thuộc tính name
dùng để tạo giá trị id riêng cho từng slot
- ở component cha, để phân biệt slot dùng v-slot
VD v-slot:header hoặc #header
- Dùng dynamic slot name : #[dynamicSlotName]
- Slot có thể truy cập vào thuộc tính của component con
VD v-slot:header="slotProps" hoặc #header="slotProps"

============ provide / inject ==========
- Dùng cho việc truyền props từ component cách xa đến component hiện tại
- Dùng trong component / hoặc dùng trong app - level 
app.provide('key', 'value')
- Để tạo props reactive, dùng compute (khi varibale thay đổi ở component cha sự thay đổi sẽ
cập nhật ỏ component con)

13/4
==== Mixin in VueJS ===========
- Sử dụng chủ yếu trong vue 2, vue 3 đã chuyển sang composition component
==== Routing trong Vue ==============
==== Store in vue ========== 


=========== event javascript, HTML ==============
- Event listener: onclick, onblur -> dùng với thẻ html 
    VD: <butotn onclick="eventHandler()" />

- Envent handler: function javascript

- Event: click, blur ...
    VD: button.addEventListener("click", eventHandler)

- Mỗi event khi xảy ra thuộc về 1 object
    Event (Interface cha)

===================== Event Bus ==================
https://kouty79.medium.com/a-journey-from-the-eventbus-pattern-to-vuex-architecture-e06152df143f

=================================== Routing VueJS ============================================
1.this.$route.params: trả về object chứa param dynamic trên routing path, this.$route.query : trả về query URL
- nếu có nhiều param trên đường dẫn, sẽ trả về object có nhiều attribute chứa các params đó
- route, routing là asynchronous
1.1 dynamic route 
const routes = {
  path: '/user/:id',
  name: "user"
  component: UserComponent
}

2. Dùng để matching tất cả request: dùng regexp (.*)
{ path: '/:pathMatch(.*)*', name: 'NotFound', component: NotFound },
- Dùng để matching tất cả request bắt đầu bằng user 
path: '/user-:afterUser(.*)'

3 Trong trường hợp dùng dynamic route matching, nếu có 2 routing cùng param, VD
/:userId
/:productName
==> 2 path trên sẽ cùng trỏ đến 1 URLs, để phân biệt 2 route này, có 2 cách
c1. Thêm phần tiền tố đằng trước 
/u/:userId
/p/:productName
c2. thêm regex để chỉ định 1 route nào đó được math với URLs (ví dụ userId chỉ match với param là numbers)
 { path: '/:orderId(\\d+)' },  giải thích: \d+ : digital từ 0-9 và có thể có nhiều số


4. Params lặp lại (repeatable params)  (* có thể có param này hoặc nhiều params) (+ có 1 hoặc nhiều param)
 // /:chapters -> matches /one, /one/two, /one/two/three, etc
{ path: '/:chapters+' }, 
  // /:chapters -> matches /, /one, /one/two, /one/two/three, etc
{ path: '/:chapters*' },


5. strict route
- match đúng đường dẫn, ko thừa \

6. Tạo optional params
 /userId? ==>? có thể có param này hoặc không


7. route lồng nhau (nested route)
  {
    path: '/user/:id',
    component: User,
    children: [
      {
        // UserProfile will be rendered inside User's <router-view>
        // when /user/:id/profile is matched
        path: 'profile',
        component: UserProfile,
      },
      {
        // UserPosts will be rendered inside User's <router-view>
        // when /user/:id/posts is matched
        path: 'posts',
        component: UserPosts,
      },
    ]
  }
- Trong component cha phải có thẻ <router-view></router-view>
- Nếu muốn chỉ cần truy cập đến url của parent và render ra component con, path trong children cần để rỗng ''
- nếu trong component con khai báo với / -> tạo ra đường dẫn tuyệt đối mà ko include path ở component cha bên ngoài

8. method push để đưa url mới vào trong stack, vì vậy click button back trên browser sẽ navigate về url trước đó.
this.$router.push = <router-link to="" />
- Có thể push 1 object 
      this.$router.push({
        name: 'profile',
        params: {
          id: 2
        }
      })

- khi dùng path, params sẽ không có tác dụng nữa
- params có thể truyền vào 1 array
- Chi tiết về programic navigation

9 Replace : thay thế url hiện tại mà không đưa vào history stack
router.push({ path: '/home', replace: true })
// equivalent to
router.replace({ path: '/home' })


10. Traverse history
router.go(n): n dương: forward n trang, n âm: back lại n trang 

https://router.vuejs.org/guide/essentials/navigation.html



11. Named view
- Dùng nhiều view cùng một lúc (ví dụ: sidebar-view và main-view)
- Trong component khai báo nhiều component khác nhau -> cần dùng tên để gọi đên đúng componet đó
Tên component tương ứng sẽ được đặt trong thuộc tính name của thẻ <router-view></router-view>


12. Redirect, alias
- Chuyển hướng người dùng khi người dùng truy cập 1 url (mà url đó đã được đổi tên thành url khác)
- alias: (bí danh) cung cấp tên gọi khác của url

13. Props
const routes = [{ path: '/user/:id', component: User, props: true }]
- khi props set bằng true, params của url sẽ được truyền thành props

14. Navigation guards
- Kiểm soát việc routing đến 1 trang web
- https://router.vuejs.org/guide/advanced/navigation-guards.html
3 cách kiểm soát truy cập vào URL

C1. Define global
router.beforeEach(async (to, from) => {

  if(to.name === 'login') {

  // call api to determine user permission

    do sthing / redirect to another url

  }
})
router.beforeResolve (
...
)

beforeEach vs beforeResolve có cách hoạt động khác nhau. beforeEach kiểm tra quyền của người dùng có được phép truy cập 
vào routing hiện tại hay không. Tronhg khi beforeResolve đảm bảo tất cả các promise đã được resolved, sau khi tất cả các in-components
và route đồng bộ được hoàn thành

C2. Per-Route Guard
- Guards với từng route riêng lẻ
- Dùng phhuwong thức beforeEnter, phương thức này chỉ được trigger khi routing path thay đổi, ko được kích hoạt
nếu params có sự thay đổi 


C3. In-component guard
dùng các phương thức: beforeRouteEnter ..., tuy nhiên sẽ ko truy cập được vào component instance
tuy nhiên có thể sử dụng next để truy cập đến component instance khi navigation đã được confirm

- beforeRouteLeave : xác nhận người sử dụng rời khỏi trang web mà chưa save nội dung

15. Route meta field
- Bổ sung việc xác thực người dùng, thuộc tính meta được định nghĩa trong mỗi route record, meta chứa 1 object 

16. Scroll
- Dùng để lưu lịch sử scroll 


17. Lazy Loading Routes
- Thông thường như đã làm từ đầu khóa học, file route index sẽ import toàn bộ component dùng để route vào file này,
tuy nhiên khi ứng dụng trở nên lớn hơn, việc import này sẽ ảnh hưởng đến tính hiệu quả của hệ thống. Đê cải thiện, ta sẽ sửu dụng
lazy loading, quá trình import được thực thi ở mỗi routing record -> chỉ khi nào component được routes đến mới cần import component đó

18. Navigation failure
- Xử lý nếu navigation có lỗi xảy ra 

const navigationResult = await router.push('/my-profile')

- dùng hàm NavigationFailureType để kiểm tra failur

19. Dynamic route
- router.addRoute() and router.removeRoute() thêm và hủy bỏ routing tương ứng.



==== Webpack bundler/ babel bundler là gì? =========
- Webpack: dùng để đóng gói code và tối ưu hiệu suất hoạt động
- babel: dùng để biên dịch mã js từ phiên bản cao hơn để có thể hoạt động ở các trình duyệt cũ




================= Vuex =======================

























// i18n
https://github.com/PhraseApp-Blog/vue-i18n-demo/tree/master/src/locales
https://phrase.com/blog/posts/vue-2-localization/
+-






























